from flask import Flask, request, jsonify
import string
import random

app = Flask(__name__)

# Generate random student data for demonstration
def generate_random_students(num_students):
    students = []
    for i in range(1, num_students + 1):
        student = {
            "id": i,
            "name": generate_random_name(),
            "total_marks": random.randint(60, 100)
        }
        students.append(student)
    return students

# Generate random student name
def generate_random_name():
    name_length = random.randint(5, 10)
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(name_length))

# Assuming student data is stored in a list of dictionaries
students = generate_random_students(100)

@app.route('/students', methods=['GET'])
def get_students():
    # Get pagination parameters from query string
    page = int(request.args.get('page', 1))
    page_size = int(request.args.get('page_size', 10))
    
    # Calculate start and end indexes for pagination
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    
    # Get filtered students based on query parameters
    filtered_students = filter_students(request.args)
    
    # Apply pagination to filtered students
    paginated_students = filtered_students[start_index:end_index]
    
    return jsonify(paginated_students)

def filter_students(filters):
    # Perform server-side filtering based on filter criteria
    filtered_students = students
    
    if 'id' in filters:
        id_filter = int(filters['id'])
        filtered_students = [student for student in filtered_students if student['id'] == id_filter]
    
    if 'name' in filters:
        name_filter = filters['name']
        filtered_students = [student for student in filtered_students if student['name'] == name_filter]
    
    if 'total_marks' in filters:
        total_marks_filter = int(filters['total_marks'])
        filtered_students = [student for student in filtered_students if student['total_marks'] == total_marks_filter]
    
    return filtered_students

if __name__ == '__main__':
    app.run()
